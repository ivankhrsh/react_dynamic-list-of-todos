{"version":3,"sources":["components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","components/Helpers.tsx","index.tsx"],"names":["TodoItem","todo","selectedTodo","handleSelectTodo","isSelectedTodoId","className","cn","id","completed","title","type","onClick","TodoList","todos","onChangeTodo","map","TodoFilter","onChangeFilter","query","onChangeQuery","onClearQuery","onChange","value","placeholder","event","style","pointerEvents","Loader","TodoModal","isLoadingUser","selectedUser","closeModal","href","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","App","useState","setTodos","setSelectedTodo","isLoadingTodos","setIsLoadingTodos","setIsLoadingUser","setSelectedUser","filter","setFilter","setQuery","isModalOpen","setIsModalOpen","visibleTodos","useMemo","initialTodos","normalizedQuery","trim","toLowerCase","isIncludes","includes","filterTodos","isTodoSelected","loadTodos","a","todosFromServer","loadUser","userId","userFromServer","useEffect","length","filterType","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.beef3ae0.chunk.js","sourcesContent":["import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todo: Todo,\n  selectedTodo: Todo | null,\n  handleSelectTodo: (todo: Todo) => void\n}\n\nexport const TodoItem: React.FC<Props> = (\n  {\n    todo,\n    selectedTodo,\n    handleSelectTodo,\n  },\n) => {\n  const isSelectedTodoId = selectedTodo === todo;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn(\n        { 'has-background-info-light': isSelectedTodoId },\n      )}\n      key={todo.id}\n    >\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n\n        <p className={cn(\n          { 'has-text-danger': !todo.completed },\n          { 'has-text-success': todo.completed },\n        )}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => handleSelectTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className={cn(\n              { 'far fa-eye': !isSelectedTodoId },\n              { 'far fa-eye-slash': isSelectedTodoId },\n            )}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  onChangeTodo: (todo: Todo) => void\n}\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    selectedTodo,\n    onChangeTodo,\n  },\n) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          selectedTodo={selectedTodo}\n          handleSelectTodo={onChangeTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","interface Props {\n  onChangeFilter: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  query: string,\n  onChangeQuery: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  onClearQuery: () => void,\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  onChangeFilter,\n  query,\n  onChangeQuery,\n  onClearQuery,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={onChangeFilter}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onChangeQuery(event)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onClearQuery()}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  isLoadingUser: boolean;\n  selectedUser: User | null;\n  selectedTodo: Todo | null;\n  closeModal: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  isLoadingUser,\n  selectedUser,\n  selectedTodo,\n  closeModal,\n}) => {\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoadingUser ? (\n        <Loader />\n      ) : (selectedUser && selectedTodo) && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => closeModal()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser.email}`}>\n                {selectedUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos, getUser } from './api';\nimport './App.css';\nimport { filterTodos } from './components/Helpers';\nimport { User } from './types/User';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<null | Todo>(null);\n  const [isLoadingTodos, setIsLoadingTodos] = useState(false);\n  const [isLoadingUser, setIsLoadingUser] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<null | User>(null);\n  const [filter, setFilter] = useState<string >('all');\n  const [query, setQuery] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const visibleTodos = useMemo(() => filterTodos(todos, filter, query), [todos, filter, query]);\n  const isTodoSelected = selectedTodo;\n\n  const loadTodos = async () => {\n    setIsLoadingTodos(true);\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n    setIsLoadingTodos(false);\n  };\n\n  const loadUser = async () => {\n    setIsLoadingUser(true);\n\n    if (isTodoSelected) {\n      const userFromServer = await getUser(selectedTodo.userId);\n\n      setSelectedUser(userFromServer);\n    }\n\n    setIsLoadingUser(false);\n  };\n\n  useEffect(() => {\n    if (todos.length === 0) {\n      loadTodos();\n    }\n\n    loadUser();\n  }, [selectedTodo]);\n\n  const handleSelectTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n    setIsModalOpen(true);\n  };\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const filterType = event.target.value;\n\n    setFilter(filterType);\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const normalizedQuery = event.target.value;\n\n    setQuery(normalizedQuery);\n  };\n\n  const clearQuery = () => (setQuery(''));\n\n  const closeModal = () => {\n    setSelectedUser(null);\n    setSelectedTodo(null);\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onChangeFilter={handleFilterChange}\n                query={query}\n                onChangeQuery={handleQueryChange}\n                onClearQuery={clearQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoadingTodos\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodo={selectedTodo}\n                    onChangeTodo={handleSelectTodo}\n                  />\n                )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {(isModalOpen) && (\n        <TodoModal\n          isLoadingUser={isLoadingUser}\n          selectedUser={selectedUser}\n          selectedTodo={selectedTodo}\n          closeModal={closeModal}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const filterTodos\n= (initialTodos: Todo[], filter:string, query: string) => {\n  const filteredTodos = initialTodos.filter((todo: Todo) => {\n    const normalizedQuery = query.trim().toLowerCase();\n    const isIncludes = todo.title.toLowerCase().includes(normalizedQuery);\n\n    switch (filter) {\n      case 'active':\n        return !todo.completed && isIncludes;\n\n      case 'completed':\n        return todo.completed && isIncludes;\n\n      default:\n        return isIncludes;\n    }\n  });\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}